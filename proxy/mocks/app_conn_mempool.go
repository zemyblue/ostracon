// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	tmabci "github.com/tendermint/tendermint/abci/types"

	abcicli "github.com/line/ostracon/abci/client"
	abci "github.com/line/ostracon/abci/types"
	mock "github.com/stretchr/testify/mock"
)

// AppConnMempool is an autogenerated mock type for the AppConnMempool type
type AppConnMempool struct {
	mock.Mock
}

// BeginRecheckTxSync provides a mock function with given fields: _a0
func (_m *AppConnMempool) BeginRecheckTxSync(_a0 abci.RequestBeginRecheckTx) (*abci.ResponseBeginRecheckTx, error) {
	ret := _m.Called(_a0)

	var r0 *abci.ResponseBeginRecheckTx
	if rf, ok := ret.Get(0).(func(abci.RequestBeginRecheckTx) *abci.ResponseBeginRecheckTx); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abci.ResponseBeginRecheckTx)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(abci.RequestBeginRecheckTx) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckTxAsync provides a mock function with given fields: _a0, _a1
func (_m *AppConnMempool) CheckTxAsync(_a0 tmabci.RequestCheckTx, _a1 abcicli.ResponseCallback) *abcicli.ReqRes {
	ret := _m.Called(_a0, _a1)

	var r0 *abcicli.ReqRes
	if rf, ok := ret.Get(0).(func(tmabci.RequestCheckTx, abcicli.ResponseCallback) *abcicli.ReqRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abcicli.ReqRes)
		}
	}

	return r0
}

// CheckTxSync provides a mock function with given fields: _a0
func (_m *AppConnMempool) CheckTxSync(_a0 tmabci.RequestCheckTx) (*abci.ResponseCheckTx, error) {
	ret := _m.Called(_a0)

	var r0 *abci.ResponseCheckTx
	if rf, ok := ret.Get(0).(func(tmabci.RequestCheckTx) *abci.ResponseCheckTx); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abci.ResponseCheckTx)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tmabci.RequestCheckTx) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EndRecheckTxSync provides a mock function with given fields: _a0
func (_m *AppConnMempool) EndRecheckTxSync(_a0 abci.RequestEndRecheckTx) (*abci.ResponseEndRecheckTx, error) {
	ret := _m.Called(_a0)

	var r0 *abci.ResponseEndRecheckTx
	if rf, ok := ret.Get(0).(func(abci.RequestEndRecheckTx) *abci.ResponseEndRecheckTx); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abci.ResponseEndRecheckTx)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(abci.RequestEndRecheckTx) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Error provides a mock function with given fields:
func (_m *AppConnMempool) Error() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FlushAsync provides a mock function with given fields: _a0
func (_m *AppConnMempool) FlushAsync(_a0 abcicli.ResponseCallback) *abcicli.ReqRes {
	ret := _m.Called(_a0)

	var r0 *abcicli.ReqRes
	if rf, ok := ret.Get(0).(func(abcicli.ResponseCallback) *abcicli.ReqRes); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abcicli.ReqRes)
		}
	}

	return r0
}

// FlushSync provides a mock function with given fields:
func (_m *AppConnMempool) FlushSync() (*tmabci.ResponseFlush, error) {
	ret := _m.Called()

	var r0 *tmabci.ResponseFlush
	if rf, ok := ret.Get(0).(func() *tmabci.ResponseFlush); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tmabci.ResponseFlush)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetGlobalCallback provides a mock function with given fields: _a0
func (_m *AppConnMempool) SetGlobalCallback(_a0 abcicli.GlobalCallback) {
	_m.Called(_a0)
}
